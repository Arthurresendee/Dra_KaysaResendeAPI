{
	2. Construir a imagem
	No diretório onde está o seu Dockerfile, execute:

	docker build -t drakaysa_api_image:dev .

	Esse comando irá construir a imagem com o nome drakaysa_api_image e tag dev.
}
==============================================================================================================================================
{
	3. Subir o container com a porta desejada
	Para que a sua aplicação rode na porta 5200 (internamente e externamente), utilize:

	docker run -d -p 5200:5200 --name drakaysa_api_container -e ASPNETCORE_URLS="http://0.0.0.0:5200" drakaysa_api_image:dev

	Explicação dos parâmetros:
	-d: Executa o container em segundo plano (detached).
	-p 5200:5200: Mapeia a porta 5200 do host para a porta 5200 do container.
	--name drakaysa_api_container: Define o nome do container.
	-e ASPNETCORE_URLS="http://0.0.0.0:5200": Define a variável de ambiente para que a aplicação escute na porta 5200.
	drakaysa_api_image:dev: Especifica a imagem que será usada.



	4. Subir o container com a porta padrão interna (80), você pode usar:

	docker run -d -p 80:80 --name drakaysa_api_container drakaysa_api_image:dev

	Isso fará com que sua aplicação, que por padrão ou pelo que está configurado no Dockerfile, escute na porta 80 dentro do container, e ela será acessível via http://localhost/api/card (ou http://localhost:80/api/card).

}






docker stop <nome-do-container>  (Para parar um container)
docker start <nome-do-container>  (Para iniciar um container)

docker rm <nome-do-container> Para remover um container:

docker exec -it drakaysa_api_container /bin/sh  (entrar no container da api)
dotnet drakaysa.dll --environment Development  (Dentro do container, rodar o .NET Debugger manualmente:)